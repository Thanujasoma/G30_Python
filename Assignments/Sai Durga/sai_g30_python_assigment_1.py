# -*- coding: utf-8 -*-
"""Sai-G30-Python-Assigment-1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wf3bJ-dA97x5DxkSAQV8YBQkBe54ibAh
"""

#1)You're at the grocery store. Write a program to calculate the total bill based on item prices and quantities, applying discounts for bulk purchases. (Variables: prices, quantities; Operators: +, -, *, /; If-else: check bulk quantities for discounts)
prices = {"Lux Soap": 38, "Tooth Paste": 50, "Boast": 150, "Jam": 100}
quantities = {"Lux Soap": 8, "Tooth Paste": 9, "Boast": 2, "Jam": 1}
total_bill = 0
for item, quantity in quantities.items():
   price = prices[item]
   discount =0
   if item == "Lux Soap" and quantity >= 3:
       discount = 0.20
   elif item == "Tooth Paste" and quantity >= 6:
       discount = 0.25
   discounted_price = price * (1 - discount)
   total_bill += discounted_price * quantity
print(f"Total bill: ${total_bill:.2f}")

# You have a budget for clothes shopping. Design a program to help you stay within your budget, considering item prices and offering suggestions if you go over. (Variables: budget, item prices; Operators: -, <, >; If-else: check budget vs. total cost)
def budget_clothes_shopping():
   budget = 2000
   total_cost = 0
   num_items = 0
   while True:
       item_price = float(input(" price of an item"))
       if item_price == 0:
           break
       total_cost += item_price
       num_items += 1
       if total_cost > budget:
           print(f"exceeded your budget{total_cost:.2f}")
           break
   if total_cost <= budget:
       print(f"your budget${budget:.2f}.")
budget_clothes_shopping()

#Travel Adventures (5):Planning a road trip? Write a program to estimate the travel time and fuel cost based on distance, vehicle mileage, and gas prices. (Variables: distance, mileage, gas price; Operators: *, /; If-else: consider different fuel efficiency for highway vs. city driving)
def Planning_aroad_trip():
  distance = float(input("distance of your trip"))
  mileage = float(input("vehicle mileage miles("))
  gas_price = float(input("current gas price"))
  mileage_percent = float(input("mileage (%): ")) / 100
  average_mileage = (mileage * mileage_percent)
  travel_time = distance / average_mileage
  fuel_cost = distance * gas_price / average_mileage
  print(f"Estimated travel time: {travel_time:.2f} hours")
  print(f"Estimated fuel cost: ${fuel_cost:.2f}")
Planning_aroad_trip()

#Packing for a camping trip? Create a program that suggests items based on weather conditions and campsite amenities. (Variables: weather, amenities; Operators: ==, !=; If-else: suggest different gear based on conditions)
def camping_trip_packing(weather, amenities):
  suggested_items = []
  if weather == "sun":
    suggested_items.extend(["Hat", "Sunglasses"])
  elif weather == "rain":
    suggested_items.extend(["Raincoat", "Umbrella"])
  if "Dry" in amenities:
    suggested_items.append("Camp fire")
  suggested_items.extend(["Tent", "Sleeping bag", "Cooking", "Water bottle", "Food", "Snacks"])
  return suggested_items
weather = "sun and rain"
amenities = ["Dry"]
suggested_items = camping_trip_packing(weather, amenities)
print(f"Suggested camping gear for {weather} weather with {amenities} amenities:")
for item in suggested_items:
  print(f"- {item}")

#Lost in the city? Design a program that recommends nearby restaurants based on your budget and dietary preferences. (Variables: budget, preferences; Operators: ==, !=; If-else: filter restaurants based on criteria)
def recommend_restaurants():
    budget = float(input("your budget"))
    preferences = input("your dietary preferences (vegetarian,non vegetarian): ")
    recommended_restaurants = []
      #response = requests.get(url)
    venues = ["India"]
    for venue in venues:
        price = venue["price"]
        if price is None or price.lower() in ["cheap", "moderate"]:
            if preferences in venue["name"].lower() or preferences in venue["categories"][0]["name"].lower():
                recommended_restaurants.append(venue["name"])
    if recommended_restaurants:
        print("Here are some restaurants that fit your criteria:")
        for restaurant in recommended_restaurants:
            print(restaurant)
recommend_restaurants()

#Choosing an investment plan? Build a program that compares different investment options based on risk tolerance and desired returns. (Variables: risk tolerance, returns; Operators: +, -, *, /; If-else: suggest options based on user's profile)
def investment_plan_suggestions(risk_tolerance, desired_returns):
  suggestions = []
  if risk_tolerance == "low":
    suggestions.append("market funds: Low risk, low returns.")
  elif risk_tolerance == "moderate":
    suggestions.append("Balanced funds:moderate risk and returns.")
  elif risk_tolerance == "high":
    suggestions.append("Growth funds: higher returns and risk.")
  if desired_returns > 10:
    suggestions.append("Consider consulting a financial advisor.")
  return suggestions
risk_tolerance = "moderate"
desired_returns = 2
suggestions = investment_plan_suggestions(risk_tolerance, desired_returns)
print(f"Investment options for {risk_tolerance} risk tolerance and {desired_returns:.2f}% desired returns:")
for suggestion in suggestions:
  print(f"- {suggestion}")

#Deciding what to cook for dinner? Write a program that recommends recipes based on available ingredients and dietary restrictions. (Variables: ingredients, restrictions; Operators: ==, !=; If-else: filter recipes based on criteria)
def recommend_recipes(ingredients, restrictions):
  recipes = {
    "pasta primavera": ["pasta", "vegetables", "olive oil", "garlic", "parmesan cheese"],
  }
  available_recipes = []
  for recipe_name, recipe_ingredients in recipes.items():
    if all(ingredient in ingredients for ingredient in recipe_ingredients):
      available_recipes.append(recipe_name)
  filtered_recipes = []
  for recipe in available_recipes:
    if not any(restriction in recipe for restriction in restrictions):
      filtered_recipes.append(recipe)
  return filtered_recipes
ingredients = ["pasta", "vegetables", "olive oil", "garlic"]
restrictions = ["vegetarian"]
recommended_recipes = recommend_recipes(ingredients, restrictions)
print(f"Recommended recipes for you:")
for recipe in recommended_recipes:
  print(f"- {recipe}")

#Planning a workout routine? Design a program that suggests exercises based on fitness level and available equipment. (Variables: fitness level, equipment; Operators: ==, !=; If-else: recommend exercises based on user's needs)
def workout_routine_suggestions(fitness_level, equipment):
  suggestions = []
  if fitness_level == "beginner":
    suggestions.append("Walking")
  elif fitness_level == "intermediate":
    suggestions.append("Jogging")
  if "dumbbells" in equipment:
    suggestions.append("Dumbbell")
  if "weight lift" in equipment:
    suggestions.append("weight lift")
  return suggestions
fitness_level = "beginner"
equipment = ["dumbbells"]
suggestions = workout_routine_suggestions(fitness_level, equipment)
print(f"Workout routine for {fitness_level} level with {equipment}:")
for exercise in suggestions:
  print(f"- {exercise}")

#Managing your schedule? Create a program that helps you prioritize tasks based on deadlines and importance. (Variables: deadlines, importance; Operators: <, >; If-else: order tasks based on priority)
class Task:
  def __init__(self, deadline, importance):
    self.deadline = deadline
    self.importance = importance
  def __repr__(self):
    return f"Task(deadline={self.deadline}, importance={self.importance})"
def prioritize_tasks(tasks):
  def sort_key(task):
    return (task.deadline, -task.importance)
  return sorted(tasks, key=sort_key)
tasks = [
  Task(deadline=1, importance=3),
  Task(deadline=3, importance=2),
  Task(deadline=2, importance=5),
  Task(deadline=1, importance=4),
]
print("Original task order:")
for task in tasks:
  print(task)
prioritized_tasks = prioritize_tasks(tasks)
print("\nPrioritized task order:")
for task in prioritized_tasks:
  print(task)

#Saving for a goal? Build a program that tracks your progress and suggests adjustments to your saving plan based on your desired timeline. (Variables: goal amount, timeline, current savings; Operators: +, -, *, /; If-else: suggest changes based on progress).
def savings_plan_tracker(goal_amount, timeline, current_savings):
  months_remaining = timeline - (current_savings / goal_amount * timeline)
  monthly_savings_needed = goal_amount / timeline
  progress_info = {
    "goal_amount": goal_amount,
    "timeline": timeline,
    "current_savings": current_savings,
    "months_remaining": months_remaining,
    "monthly_savings_needed": monthly_savings_needed,
  }
  suggestions = {}
  if months_remaining < 0:
    suggestions["message"] = "Congratulations! You've reached your goal early!"
  elif months_remaining > timeline:
    suggestions["message"] = "You're falling behind. Consider increasing your monthly savings."
    suggestions["adjustment"] = monthly_savings_needed - (current_savings / timeline)
  else:
    suggestions["message"] = "You're on track! Keep up the good work."
  return progress_info, suggestions
goal_amount = 10000
timeline = 12
current_savings = 5000
progress_info, suggestions = savings_plan_tracker(goal_amount, timeline, current_savings)
print("Progress information:")
for key, value in progress_info.items():
  print(f"- {key}: {value}")
print("Suggestions:")
for key, value in suggestions.items():
  print(f"- {key}: {value}")

#Symptom Checker: Create a program that asks users about their symptoms and suggests possible causes based on a knowledge base, recommending when to seek medical attention. (Variables: symptoms; Operators: ==, !=; If-else: match symptoms to possible causes)
def symptom_checker():
    knowledge_base = {
        "fever": ["common cold", "flu", "infection", "COVID-19"],
        "cough": ["common cold", "flu", "allergies", "pneumonia", "COVID-19"],
        "headache": ["migraine", "tension headache", "dehydration", "sinus infection"],
    }
    user_symptoms = []
    while True:
        symptom = input("Enter a symptom (or type 'done': ")
        if symptom.lower() == "done":
            break
        user_symptoms.append(symptom.lower())
    possible_causes = []
    for symptom in user_symptoms:
        if symptom in knowledge_base:
            possible_causes.extend(knowledge_base[symptom])
    if possible_causes:
        print("Based on your symptoms")
        for cause in set(possible_causes):
            print("Covid", cause)
    else:
        print("I'm not familiar with the symptoms Please consult a doctor.")
symptom_checker()

#Grade Calculator: Build a program that calculates student grades based on assignments, exams, and attendance, considering different weighting schemes for different factors. (Variables: grades, weights; Operators: +, -, *, /; If-else: apply different weights based on course policies)
def calculate_grade(assignments, exams, attendance, weights):
  assignment_average = sum(assignments) * weights["assignments"] / len(assignments)
  exam_average = sum(exams) * weights["exams"] / len(exams)
  attendance_contribution = attendance * weights["attendance"]
  final_grade = assignment_average + exam_average + attendance_contribution
  return final_grade
assignments = [80, 95, 78]
exams = [90, 85]
attendance = 92
weights = {"assignments": 0.4, "exams": 0.5, "attendance": 0.1}
final_grade = calculate_grade(assignments, exams, attendance, weights)
print(f"Final grade: {final_grade:.2f}")

#College Major Selector: Design a program that helps students choose a college major based on their interests, skills, and job market trends. (Variables: interests, skills, trends; Operators: ==, !=; If-else: match user profile to potential majors)
def college_major_selector():
 interests = input("Enter your interests").split(",")
 skills = input("Enter your skills").split(",")
 trends = {
   "growing": ["Computer Science", "Engineering", "Healthcare",],
   "stable": ["Business", "Education", "Accounting", "Finance"],
 }
 potential_majors = []
 for interest in interests:
   if interest in ["science", "math"]:
     potential_majors.extend(["Computer Science", "Physics", "Mathematics"])
   elif interest in ["business", "finance",]:
     potential_majors.extend(["Business", "Accounting", "Finance",])
 for skill in skills:
   if skill in ["programming", "coding", "problem solving"]:
     potential_majors.append("Computer Science")
   elif skill in ["writing", "communication"]:
     potential_majors.extend(["English","Communications"])
 trending_majors = trends["growing"]
 potential_majors = [major for major in potential_majors if major in trending_majors]
 if potential_majors:
   print("Here are some your match your interests, skills, and trends:")
   for major in potential_majors:
     print(f"- {major}")
 else:
   print("Sorry, I couldn't find your interests or skills, or trends.")
college_major_selector()

#Recycling Assistant: Design a program that identifies different types of waste and suggests proper recycling or disposal methods based on local regulations. (Variables: waste type; Operators: ==, !=; If-else: match waste to disposal methods)
def recycling_assistant(waste_type):
  disposal_methods = {
    "paper": "Recycle in blue bin",
    "plastic bottle": "Recycle in blue bin",
    "glass bottle": "Recycle in green bin",
    "food scraps": "Compost or dispose in green bin",
    "yard waste": "Compost or dispose in green bin",
  }
  if waste_type in disposal_methods:
    return disposal_methods[waste_type]
  else:
    return "Please specify the type of waste more accurately."
waste_type = "plastic bottle"
disposal_method = recycling_assistant(waste_type)
print(f"For {waste_type}, you should {disposal_method}.")